{"version":3,"sources":["images/aprtm_plnr1.jpg","images/aprtm_plnr2.jpg","images/aprtm_plnr3.jpg","images/aprtm_plnr4.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","href","id","Carousel","Item","src","planner1","alt","Caption","planner2","planner3","planner4","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gPCkF5BC,MAvEf,WACE,OACE,6BACE,yBAAKC,UAAU,cACb,uBAAGA,UAAU,aAAaC,KAAK,eAA/B,oBAEF,8BACA,yBAAKD,UAAU,OAAOE,GAAG,cACvB,yBAAKF,UAAU,YAAf,YACA,uCAAiB,uBAAGC,KAAK,+BAAR,wBACjB,8CAAwB,uBAAGA,KAAK,mBAAR,eACxB,oCAAc,uBAAGA,KAAK,yBAAR,WACd,sCACA,wCAAkB,uBAAGA,KAAK,6BAAR,YAEpB,yCACA,yBAAKD,UAAU,qBACb,kBAACG,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,KAAV,KACE,yBACEJ,UAAU,gBACVK,IAAKC,IACLC,IAAI,gBAEN,kBAACJ,EAAA,EAASK,QAAV,KACE,iDACA,2FAGJ,kBAACL,EAAA,EAASC,KAAV,KACE,yBACEJ,UAAU,gBACVK,IAAKI,IACLF,IAAI,gBAGN,kBAACJ,EAAA,EAASK,QAAV,KACE,kDACA,yFAGJ,kBAACL,EAAA,EAASC,KAAV,KACE,yBACEJ,UAAU,gBACVK,IAAKK,IACLH,IAAI,gBAGN,kBAACJ,EAAA,EAASK,QAAV,KACE,iDACA,iGAGJ,kBAACL,EAAA,EAASC,KAAV,KACE,yBACEJ,UAAU,gBACVK,IAAKM,IACLJ,IAAI,iBAGN,kBAACJ,EAAA,EAASK,QAAV,KACE,kDACA,qGC7DMI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d4730d87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aprtm_plnr1.b1c5eac7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/aprtm_plnr2.617119bd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/aprtm_plnr3.eea1c989.jpg\";","module.exports = __webpack_public_path__ + \"static/media/aprtm_plnr4.21576359.jpg\";","import React from 'react';\nimport './App.css';\nimport Carousel from 'react-bootstrap/Carousel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*images*/\nimport planner1 from './images/aprtm_plnr1.jpg';\nimport planner2 from './images/aprtm_plnr2.jpg';\nimport planner3 from './images/aprtm_plnr3.jpg';\nimport planner4 from './images/aprtm_plnr4.jpg';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"App-header\">\n        <a className=\"nameAuthor\" href=\"#top-navnar\">vladislav novak</a>        \n      </div>\n      <div></div>\n      <div className=\"info\" id=\"top-navnar\">\n        <div className=\"contacts\">Contacts</div>\n        <div>Email:</div><a href=\"mailto:novak.vlad97@mail.ru\">novak.vlad97@mail.ru</a>\n        <div>Phone number:</div><a href=\"tel:89806550836\">89806550836</a>\n        <div>VK:</div><a href=\"https://vk.com/1uckyy\">@1uckyy</a>\n        <div>Links</div>\n        <div>Github:</div><a href=\"https://github.com/1uckyy\">@1uckyy</a>\n      </div>\n      <div>Projects</div>\n      <div className=\"carouselContainer\">\n        <Carousel>\n          <Carousel.Item>\n            <img\n              className=\"d-block w-100\"\n              src={planner1}\n              alt=\"First slide\"\n            />\n            <Carousel.Caption>\n              <h3>First slide label</h3>\n              <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n            </Carousel.Caption>\n          </Carousel.Item>\n          <Carousel.Item>\n            <img\n              className=\"d-block w-100\"\n              src={planner2}\n              alt=\"Third slide\"\n            />\n\n            <Carousel.Caption>\n              <h3>Second slide label</h3>\n              <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n            </Carousel.Caption>\n          </Carousel.Item>\n          <Carousel.Item>\n            <img\n              className=\"d-block w-100\"\n              src={planner3}\n              alt=\"Third slide\"\n            />\n\n            <Carousel.Caption>\n              <h3>Third slide label</h3>\n              <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n            </Carousel.Caption>\n          </Carousel.Item>\n          <Carousel.Item>\n            <img\n              className=\"d-block w-100\"\n              src={planner4}\n              alt=\"Fourth slide\"\n            />\n\n            <Carousel.Caption>\n              <h3>Fourth slide label</h3>\n              <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n            </Carousel.Caption>\n          </Carousel.Item>\n        </Carousel>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}